import org.apache.mahout.cf.taste.eval.DataModelBuilder;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;

import java.io.File;
import java.util.List;

public class RecommenderApp {
    public static void main(String[] args) {
        try {
            // 1. Load data from CSV
            DataModel model = new FileDataModel(new File("data.csv"));

            // 2. Compute similarity
            UserSimilarity similarity = new PearsonCorrelationSimilarity(model);

            // 3. Find neighborhood (nearest N users)
            UserNeighborhood neighborhood = new NearestNUserNeighborhood(2, similarity, model);

            // 4. Build recommender
            GenericUserBasedRecommender recommender =
                    new GenericUserBasedRecommender(model, neighborhood, similarity);

            // 5. Recommend 3 items for user with ID = 3
            int userId = 3;
            List<RecommendedItem> recommendations = recommender.recommend(userId, 3);

            System.out.println("Recommendations for user " + userId + ":");
            for (RecommendedItem item : recommendations) {
                System.out.printf("Item %d, score %.2f\n", item.getItemID(), item.getValue());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
4
